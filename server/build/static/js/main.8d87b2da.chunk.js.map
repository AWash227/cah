{"version":3,"sources":["components/Deck.tsx","components/Card.tsx","service.ts","helpers.ts","pages/Lobby.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Deck","props","deck","selected","p","m","boxShadow","w","h","borderRadius","textAlign","display","justifyContent","alignItems","bgColor","color","position","cursor","transition","_hover","opacity","border","borderColor","top","right","bottom","left","width","height","px","py","borderBottomRightRadius","fontSize","fontWeight","as","FaCheck","name","official","_groupHover","Card","card","type","visible","useState","random","setRandom","useEffect","Math","round","transform","zIndex","index","borderTopLeftRadius","overflowY","pb","pick","text","socket","io","reconnection","SocketContext","React","createContext","getPlayerFromLocalStorage","window","localStorage","getItem","possiblePlayer","JSON","parse","LobbySettings","gameState","useContext","player","setPlayer","maxScore","setMaxScore","possibleDecks","setPossibleDecks","decks","map","id","setDecks","handleDecksFound","useCallback","handleChangeSettings","e","preventDefault","emit","newPlayer","on","handleStartGame","owner","onSubmit","onClick","onChange","parseInt","target","value","wrap","maxH","includes","filter","sDeck","LobbyJoinForm","players","setName","handleSignUp","handlePlayerCreated","handleJoinRoom","spacing","flex","placeholder","colorScheme","LobbyHeader","mx","maxWidth","LobbyPlayers","length","RandomCards","packId","Lobby","setItem","stringify","emptyGameState","rounds","currentRound","winner","Game","hand","selectedCards","setSelectedCards","setRound","newRoundState","handleCzarClick","playerId","judgedById","handleSubmitCard","blackCard","cards","handleRestartGame","isOpen","onClose","align","justify","size","plays","play","outline","outlineColor","playersLeft","templateColumns","isStillPlaying","isCzar","czar","console","log","leftIcon","FaCheckDouble","i","canAddCard","handleCardSelect","findIndex","sCard","Players","score","App","setGameState","setHand","handleGameChanged","handleHandFound","className","overflow","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d87b2da.chunk.js","sourcesContent":["import React from \"react\";\nimport { Box, BoxProps, HStack, Text, Icon } from \"@chakra-ui/react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { Deck as IDeck } from \"../types\";\n\ninterface DeckProps extends BoxProps {\n  deck: IDeck;\n  selected?: boolean;\n}\n\nconst Deck = (props: DeckProps) => {\n  const { deck, selected } = props;\n  return (\n    <Box\n      p={6}\n      m={4}\n      boxShadow=\"md\"\n      w={175 / 2}\n      h={225 / 2}\n      borderRadius={5}\n      textAlign=\"center\"\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      bgColor=\"gray.600\"\n      color=\"white\"\n      position=\"relative\"\n      cursor=\"pointer\"\n      transition=\"all 0.25s ease-in-out\"\n      {...props}\n      _hover={{\n        opacity: 0.9,\n      }}\n    >\n      <Box\n        borderRadius={5}\n        border=\"5px solid\"\n        borderColor=\"blue.500\"\n        top={0}\n        right={0}\n        bottom={0}\n        left={0}\n        position=\"absolute\"\n        width=\"100%\"\n        height=\"100%\"\n        opacity={selected ? 1 : 0}\n        transition=\"opacity 0.15s\"\n      >\n        <Box\n          position=\"absolute\"\n          top={0}\n          left={0}\n          px={2}\n          py={1}\n          borderBottomRightRadius={5}\n          bgColor=\"blue.500\"\n          color=\"white\"\n          fontSize=\"xx-small\"\n          fontWeight=\"bold\"\n        >\n          <HStack>\n            <Icon fontSize=\"xx-small\" color=\"white\" as={FaCheck} />\n            <Text>Selected</Text>\n          </HStack>\n        </Box>\n      </Box>\n      <Text fontSize=\"xx-small\" fontWeight=\"bold\">\n        {deck.name}\n      </Text>\n      {deck.official && (\n        <Text\n          _groupHover={{ right: 2, bottom: 2 }}\n          fontSize=\"xx-small\"\n          position=\"absolute\"\n          right={4}\n          bottom={4}\n        >\n          Official\n        </Text>\n      )}\n    </Box>\n  );\n};\n\nexport default Deck;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { Box, BoxProps, HStack, Text, Icon } from \"@chakra-ui/react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { blackcard, whitecard } from \"../types\";\n\ninterface CardProps extends BoxProps {\n  card: whitecard & blackcard;\n  selected?: boolean;\n  type?: \"white\" | \"black\";\n  visible?: boolean;\n  index?: number;\n}\n\nconst Card = (props: CardProps) => {\n  const { card, selected, type = \"white\", visible = true } = props;\n  const [random, setRandom] = useState(0);\n\n  useEffect(() => {\n    setRandom(Math.random() * 5 * (Math.round(Math.random()) === 0 ? -1 : 1));\n  }, []);\n\n  return (\n    <Box\n      px={6}\n      py={8}\n      boxShadow=\"md\"\n      w={175}\n      h={225}\n      borderRadius={5}\n      bgColor={type === \"white\" ? \"white\" : \"gray.600\"}\n      color={type === \"white\" ? \"gray.800\" : \"white\"}\n      position=\"relative\"\n      cursor=\"pointer\"\n      transform={`rotate(${random}deg)`}\n      transition=\"all 0.25s ease-in-out\"\n      {...(selected ? { zIndex: 200 } : {})}\n      {...props}\n      _hover={{\n        zIndex: 200,\n        transform: \"scale(1.1)\",\n        boxShadow: \"xl\",\n        opacity: 0.98,\n        ...props._hover,\n      }}\n    >\n      <Box\n        borderRadius={5}\n        border=\"5px solid\"\n        borderColor=\"blue.500\"\n        top={0}\n        right={0}\n        bottom={0}\n        left={0}\n        position=\"absolute\"\n        width=\"100%\"\n        height=\"100%\"\n        opacity={selected ? 1 : 0}\n        transition=\"opacity 0.15s\"\n      >\n        <Box\n          position=\"absolute\"\n          top={0}\n          left={0}\n          px={2}\n          py={1}\n          borderBottomRightRadius={5}\n          bgColor=\"blue.500\"\n          color=\"white\"\n          fontSize=\"xx-small\"\n          fontWeight=\"bold\"\n        >\n          <HStack>\n            <Icon fontSize=\"xx-small\" color=\"white\" as={FaCheck} />\n            <Text>Selected</Text>\n          </HStack>\n        </Box>\n        {props.index && (\n          <Box\n            position=\"absolute\"\n            bottom={0}\n            right={0}\n            px={2}\n            py={1}\n            bgColor=\"blue.500\"\n            color=\"white\"\n            fontSize=\"md\"\n            fontWeight=\"bold\"\n            borderTopLeftRadius={5}\n            borderColor=\"blue.500\"\n          >\n            <HStack>\n              <Text fontSize=\"xs\">{props.index}</Text>\n            </HStack>\n          </Box>\n        )}\n      </Box>\n      {visible && (\n        <Text\n          width=\"100%\"\n          height=\"100%\"\n          overflowY=\"auto\"\n          fontSize=\"sm\"\n          fontWeight=\"bold\"\n          pb={card.pick ? 8 : 0}\n        >\n          {card.text}\n        </Text>\n      )}\n      {card && card.pick && type === \"black\" && (\n        <Text\n          position=\"absolute\"\n          right={4}\n          bottom={4}\n          fontSize=\"xl\"\n          fontWeight=\"bold\"\n          opacity=\"0.5\"\n        >\n          Pick {card.pick}\n        </Text>\n      )}\n    </Box>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport { io, Socket } from \"socket.io-client\";\nexport const socket = io(\"\", { reconnection: true });\nexport const SocketContext = React.createContext<Socket | null>(null);\n","import { Player } from \"./types\";\n\nexport const getPlayerFromLocalStorage = (): Player | null => {\n  if (typeof window.localStorage.getItem(\"player\") !== \"undefined\") {\n    const possiblePlayer = window.localStorage.getItem(\"player\");\n    if (possiblePlayer) {\n      return JSON.parse(possiblePlayer);\n    }\n  }\n  return null;\n};\n","import {\n  Box,\n  Button,\n  Flex,\n  FormLabel,\n  Heading,\n  HStack,\n  Input,\n  Select,\n  Stack,\n  Table,\n  Tbody,\n  Text,\n  Th,\n  Thead,\n  Tr,\n} from \"@chakra-ui/react\";\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Socket } from \"socket.io-client\";\nimport Card from \"../components/Card\";\nimport Deck from \"../components/Deck\";\nimport { getPlayerFromLocalStorage } from \"../helpers\";\nimport { SocketContext } from \"../service\";\nimport { Deck as IDeck, GameState, Player } from \"../types\";\n\nexport interface ILobby {\n  decks: IDeck[];\n  players: Player[];\n  maxScore: number;\n  owner: Player;\n}\n\nconst Lobby = ({ gameState }: { gameState: GameState }) => {\n  const socket: Socket | null = useContext(SocketContext);\n\n  // After joining the lobby, get the player returned\n  // and save that to localStorage so you can stay as that person\n  const handleLobbyJoined = useCallback((player: Player) => {\n    window.localStorage.setItem(\"player\", JSON.stringify(player));\n  }, []);\n\n  return (\n    <Box width=\"100%\" height=\"100%\">\n      <LobbyHeader />\n      <Stack spacing={4} maxWidth=\"50rem\" mx=\"auto\">\n        <LobbyJoinForm players={gameState.players} />\n        <LobbySettings gameState={gameState} />\n        <LobbyPlayers players={gameState.players} />\n      </Stack>\n    </Box>\n  );\n};\n\nconst LobbySettings = ({ gameState }: { gameState: GameState }) => {\n  const socket: Socket | null = useContext(SocketContext);\n  const [player, setPlayer] = useState<Player | null>(null);\n  const [maxScore, setMaxScore] = useState<number>(gameState.maxScore || 5);\n  const [possibleDecks, setPossibleDecks] = useState<IDeck[]>([]);\n  const [decks, setDecks] = useState<number[]>(\n    gameState.decks.map((deck) => deck.id) || []\n  );\n  // If the player is the lobby owner, show settings\n\n  useEffect(() => {\n    setDecks(gameState.decks.map((deck) => deck.id));\n  }, [gameState, setDecks]);\n\n  const handleDecksFound = useCallback((decks: any) => {\n    setPossibleDecks(decks);\n  }, []);\n\n  const handleChangeSettings = useCallback(\n    (e: any) => {\n      e.preventDefault();\n      socket?.emit(\"CHANGE_SETTINGS\", { maxScore, decks });\n    },\n    [maxScore, decks]\n  );\n\n  useEffect(() => {\n    const newPlayer = getPlayerFromLocalStorage();\n    if (newPlayer) {\n      setPlayer(newPlayer);\n    }\n    socket?.emit(\"GET_DECKS\");\n    socket?.on(\"DECKS_FOUND\", handleDecksFound);\n  }, []);\n\n  const handleStartGame = useCallback(() => {\n    socket?.emit(\"START_GAME\");\n  }, []);\n\n  if (player && gameState.owner?.id === player.id) {\n    return (\n      <>\n        <form onSubmit={handleChangeSettings}>\n          <Button onClick={handleStartGame}>Start Game</Button>\n          <FormLabel>Max Score</FormLabel>\n          <Select\n            onChange={(e) => setMaxScore(parseInt(e.target.value))}\n            value={maxScore}\n          >\n            <option value={5}>5</option>\n            <option value={10}>10</option>\n            <option value={15}>15</option>\n            <option value={20}>20</option>\n            <option value={25}>25</option>\n          </Select>\n          <Flex wrap=\"wrap\" p={2} overflowY=\"auto\" maxH=\"15rem\">\n            {possibleDecks.map((deck) => (\n              <Deck\n                key={deck.id}\n                deck={deck}\n                onClick={() =>\n                  setDecks((decks) =>\n                    decks.includes(deck.id)\n                      ? decks.filter((sDeck) => sDeck !== deck.id)\n                      : [...decks, deck.id]\n                  )\n                }\n                selected={decks.includes(deck.id)}\n              />\n            ))}\n          </Flex>\n          <Button type=\"submit\">Update Settings</Button>\n        </form>\n      </>\n    );\n  }\n  return null;\n};\n\nconst LobbyJoinForm = ({\n  players,\n}: {\n  players: { id: string; name: string }[];\n}) => {\n  const socket: Socket | null = useContext(SocketContext);\n  const [name, setName] = useState(\"\");\n  const player = getPlayerFromLocalStorage();\n\n  const handleSignUp = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      socket?.emit(\"CREATE_PLAYER\", name);\n    },\n    [name]\n  );\n\n  const handlePlayerCreated = useCallback(() => {\n    const possiblePlayer = getPlayerFromLocalStorage();\n    if (possiblePlayer) {\n      setName(possiblePlayer.name);\n    }\n  }, [setName]);\n\n  useEffect(() => {\n    socket?.on(\"PLAYER_CREATED\", handlePlayerCreated);\n  }, []);\n\n  const handleJoinRoom = useCallback(\n    (e: any) => {\n      e.preventDefault();\n      if (player) {\n        socket?.emit(\"JOIN\", player);\n      }\n    },\n    [player]\n  );\n\n  return (\n    <form onSubmit={!player ? handleSignUp : handleJoinRoom}>\n      <HStack spacing={4}>\n        {!player && (\n          <Input\n            flex={3}\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            placeholder=\"Insert Witty Name Here...\"\n          />\n        )}\n        {player && !players.map((player) => player.id).includes(player.id) && (\n          <Button flex={1} colorScheme=\"blue\" type=\"submit\">\n            Create Account\n          </Button>\n        )}\n      </HStack>\n    </form>\n  );\n};\n\nconst LobbyHeader = () => {\n  return (\n    <Box p={4}>\n      <RandomCards />\n      <Box mx=\"auto\" maxWidth=\"50rem\">\n        <Heading>Cards Against Humanity</Heading>\n        <Text>A better version I think</Text>\n        <Text>Enter your name into the text box, and click join</Text>\n        <Text>\n          When everyone is in, anyone can click start game to start it\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nconst LobbyPlayers = ({ players }: { players: Player[] }) => {\n  return (\n    <Table>\n      <Thead>\n        <Tr>\n          <Th>Name</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {players.length > 0 ? (\n          players.map((player) => <Tr key={player.id}>{player.name}</Tr>)\n        ) : (\n          <Text>No one in room</Text>\n        )}\n      </Tbody>\n    </Table>\n  );\n};\n\nconst RandomCards = () => {\n  return (\n    <>\n      <Card\n        position=\"absolute\"\n        left={25}\n        top={25}\n        card={{ id: 0, text: \"Your mom, lol\", packId: 0 }}\n        type=\"white\"\n      />\n      <Card\n        position=\"absolute\"\n        right={25}\n        top={25}\n        card={{ id: 0, text: \"That feel when _\", packId: 0, pick: 1 }}\n        type=\"black\"\n      />\n      <Card\n        position=\"absolute\"\n        right={350}\n        bottom={0}\n        card={{ id: 0, text: \"Get Creeged\", packId: 0 }}\n        type=\"white\"\n      />\n      <Card\n        position=\"absolute\"\n        bottom={25}\n        left={300}\n        card={{ id: 0, text: \"Who you gonna call? _.\", packId: 0, pick: 1 }}\n        type=\"black\"\n      />\n    </>\n  );\n};\n\nexport default Lobby;\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  Heading,\n  HStack,\n  Icon,\n  Input,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalOverlay,\n  SimpleGrid,\n  Stack,\n  Table,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tr,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport Deck from \"./components/Deck\";\nimport Card from \"./components/Card\";\nimport { FaCheckDouble } from \"react-icons/fa\";\nimport { SocketContext, socket } from \"./service\";\nimport Lobby from \"./pages/Lobby\";\nimport { getPlayerFromLocalStorage } from \"./helpers\";\nimport { GamePlayer, GameState, Player, whitecard } from \"./types\";\n\nconst emptyGameState: GameState = {\n  players: [],\n  maxScore: 5,\n  decks: [],\n  owner: null,\n  rounds: [],\n  currentRound: -1,\n  winner: null,\n};\n\nfunction App() {\n  const [gameState, setGameState] = useState<GameState>(emptyGameState);\n  const [hand, setHand] = useState<whitecard[]>([]);\n\n  const handleGameChanged = useCallback((gameState: GameState) => {\n    console.log(gameState.players);\n    setGameState(gameState);\n    const player = getPlayerFromLocalStorage();\n    if (player) {\n      socket.emit(\"GET_HAND\", player.id);\n    }\n\n    console.log(\"DECKS\", gameState.decks);\n  }, []);\n\n  const handlePlayerCreated = useCallback((player: Player) => {\n    window.localStorage.setItem(\"player\", JSON.stringify(player));\n  }, []);\n\n  const handleHandFound = useCallback(\n    (hand: whitecard[]) => {\n      setHand(hand);\n    },\n    [setHand]\n  );\n\n  useEffect(() => {\n    socket.on(\"GAME_CHANGED\", handleGameChanged);\n    socket.on(\"PLAYER_CREATED\", handlePlayerCreated);\n    socket.emit(\"GET_GAME\");\n    socket.on(\"HAND_FOUND\", handleHandFound);\n  }, [socket]);\n\n  return (\n    <Box className=\"App\" position=\"relative\" overflow=\"hidden\">\n      <SocketContext.Provider value={socket}>\n        <Game gameState={gameState} hand={hand} />\n      </SocketContext.Provider>\n    </Box>\n  );\n}\n\nconst Game = ({\n  gameState,\n  hand,\n}: {\n  gameState: GameState;\n  hand: whitecard[];\n}) => {\n  const socket = useContext(SocketContext);\n  const [selectedCards, setSelectedCards] = useState<number[]>([]);\n  const [player, setPlayer] = useState<Player | null>(null);\n\n  const [round, setRound] = useState<any>(\n    gameState.rounds[gameState.currentRound]\n  );\n  useEffect(() => {\n    if (gameState.rounds.length === 0) {\n      setRound(null);\n    } else {\n      const newRoundState = gameState.rounds[gameState.currentRound];\n      if (newRoundState) {\n        setRound(newRoundState);\n      }\n    }\n  }, [gameState, setRound]);\n\n  useEffect(() => {\n    const newPlayer = getPlayerFromLocalStorage();\n    if (newPlayer) {\n      setPlayer(newPlayer);\n    }\n  }, [setPlayer]);\n\n  const handleCzarClick = useCallback(\n    (playerId: string) => {\n      if (player) {\n        socket?.emit(\"JUDGE_PLAY\", { playerId, judgedById: player.id });\n      }\n    },\n    [socket, player]\n  );\n\n  const handleCardSelect = (card: whitecard) => {\n    if (round.blackCard.pick === 1) {\n      setSelectedCards(\n        selectedCards.includes(card.id)\n          ? selectedCards.filter((id) => card.id !== id)\n          : [card.id]\n      );\n    } else {\n      const canAddCard =\n        !selectedCards?.includes(card.id) &&\n        round.blackCard.pick &&\n        selectedCards?.length < round.blackCard.pick;\n      setSelectedCards(\n        canAddCard\n          ? [...selectedCards, card.id]\n          : selectedCards?.filter((id) => card.id !== id)\n      );\n    }\n  };\n\n  const handleSubmitCard = useCallback(() => {\n    if (selectedCards.length === round.blackCard.pick) {\n      socket?.emit(\"SUBMIT_PLAY\", {\n        playerId: player?.id,\n        cards: selectedCards,\n      });\n      setSelectedCards([]);\n    }\n  }, [socket, gameState, selectedCards]);\n\n  const handleRestartGame = useCallback(() => {\n    socket?.emit(\"RESTART_GAME\");\n  }, []);\n\n  if (gameState.winner)\n    return (\n      <Modal isOpen={true} onClose={() => {}}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalBody>\n            <Flex\n              width=\"100%\"\n              height=\"100%\"\n              align=\"center\"\n              justify=\"center\"\n              p={4}\n            >\n              <Stack spacing={6}>\n                <Heading size=\"lg\">{`${gameState.winner.name} Won!`}</Heading>\n                <Button\n                  colorScheme=\"blue\"\n                  size=\"lg\"\n                  onClick={handleRestartGame}\n                >\n                  Restart Game\n                </Button>\n              </Stack>\n            </Flex>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    );\n  else if (!round) return <Lobby gameState={gameState} />;\n\n  return (\n    <Box position=\"relative\" width=\"100%\" height=\"100%\">\n      {/* Board Area */}\n      <Box width=\"100%\">\n        <Stack spacing={2}>\n          <HStack spacing={2}>\n            <Box px={4}>\n              <Heading pb={4} size=\"md\">\n                Black Card\n              </Heading>\n              {round.blackCard && <Card type=\"black\" card={round.blackCard} />}\n            </Box>\n            {round.plays.map((play) => (\n              <HStack\n                key={play.playerId}\n                spacing={-50}\n                p={2}\n                borderRadius={5}\n                transition=\"all 0.25s ease-in-out\"\n                _hover={{ outline: \"3px solid\", outlineColor: \"blue.500\" }}\n                onClick={() => handleCzarClick(play.playerId)}\n              >\n                {play.cards.map((card: any) => (\n                  <Card\n                    key={card.id}\n                    card={card}\n                    type=\"white\"\n                    visible={round.playersLeft.length === 0}\n                  />\n                ))}\n              </HStack>\n            ))}\n          </HStack>\n        </Stack>\n      </Box>\n\n      {/* Hand Area */}\n      <Box\n        width=\"100%\"\n        maxH={300}\n        h={300}\n        position=\"absolute\"\n        left={0}\n        bottom={0}\n        p={4}\n        bgColor=\"gray.100\"\n      >\n        <Grid templateColumns={\"1fr 3fr\"}>\n          <Players\n            players={gameState.players}\n            isStillPlaying={(playerId: string): boolean =>\n              round.playersLeft.includes(playerId)\n            }\n            isCzar={(playerId: string): boolean => round.czar.id === playerId}\n          />\n          {console.log(\"Players Left\", round.playersLeft)}\n          <Box height=\"100%\" position=\"relative\">\n            {round.czar.id === player?.id ? (\n              <Flex width=\"100%\" height=\"100%\" justify=\"center\" align=\"center\">\n                <Text fontWeight=\"bold\">You are the Card Czar</Text>\n              </Flex>\n            ) : player && !round.playersLeft.includes(player.id) ? (\n              <Flex width=\"100%\" height=\"100%\" justify=\"center\" align=\"center\">\n                <Text fontWeight=\"bold\">\n                  You've already played a card this round.\n                </Text>\n              </Flex>\n            ) : (\n              <>\n                <Flex justify=\"space-between\" align=\"center\" p={2}>\n                  <Text fontWeight=\"bold\">Your Cards</Text>\n                  <Button\n                    size=\"sm\"\n                    colorScheme=\"blue\"\n                    leftIcon={<Icon as={FaCheckDouble} />}\n                    onClick={handleSubmitCard}\n                  >\n                    Confirm Move\n                  </Button>\n                </Flex>\n\n                <Box height=\"100%\">\n                  <Flex height=\"100%\" justify=\"center\">\n                    {hand &&\n                      player?.id &&\n                      hand.map((card, i) => (\n                        <Card\n                          key={card.id}\n                          card={card}\n                          onClick={() => handleCardSelect(card)}\n                          selected={selectedCards.includes(card.id)}\n                          index={\n                            selectedCards.findIndex(\n                              (sCard) => sCard === card.id\n                            ) + 1\n                          }\n                        />\n                      ))}\n                  </Flex>\n                </Box>\n              </>\n            )}\n          </Box>\n        </Grid>\n      </Box>\n    </Box>\n  );\n};\n\nconst Players = ({\n  players,\n  isStillPlaying,\n  isCzar,\n}: {\n  players: GamePlayer[];\n  isStillPlaying: (playerId: string) => boolean;\n  isCzar: (playerId: string) => boolean;\n}) => {\n  return (\n    <Table size=\"sm\">\n      <Thead>\n        <Tr>\n          <Th>Name</Th>\n          <Th>Score</Th>\n          <Th>Status</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {players.map((player) => (\n          <Tr key={player.id}>\n            <Td>{player.name}</Td>\n            <Td>{player.score}</Td>\n            <Td>\n              {isCzar(player.id)\n                ? \"Card Czar\"\n                : isStillPlaying(player.id)\n                ? \"Playing\"\n                : \"Done\"}\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\nconst DeckSelection = () => {\n  const [decks, setDecks] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:5000/decks\")\n      .then((res) => setDecks(res.data))\n      .catch((err) => console.error(err));\n  }, []);\n\n  const [selectedDecks, setSelectedDecks] = useState<number[]>([]);\n\n  const selectDeck = (id: number) => setSelectedDecks(selectedDecks.concat(id));\n  const deselectDeck = (id: number) =>\n    setSelectedDecks((selectedDecks) =>\n      selectedDecks.filter((deckId) => deckId !== id)\n    );\n  const toggleDeck = (id: number) =>\n    selectedDecks.includes(id) ? deselectDeck(id) : selectDeck(id);\n\n  return (\n    <div className=\"App\">\n      <Stack spacing={4}>\n        <Heading>Cards Against Humanity</Heading>\n        <Heading size=\"md\">Packs</Heading>\n        <Text>Select which packs you'd like to play with.</Text>\n        <Text fontSize=\"sm\" fontWeight=\"bold\">{`${selectedDecks.length} deck${\n          selectedDecks.length > 1 ? \"s\" : \"\"\n        } selected`}</Text>\n        <SimpleGrid columns={4} spacingY={4} spacingX={4}>\n          {decks &&\n            decks.map((deck: any) => (\n              <Deck\n                key={deck.id}\n                selected={selectedDecks.includes(deck.id)}\n                onClick={() => toggleDeck(deck.id)}\n                deck={deck}\n              />\n            ))}\n        </SimpleGrid>\n      </Stack>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider, CSSReset } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <BrowserRouter>\n        <CSSReset />\n        <App />\n      </BrowserRouter>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}